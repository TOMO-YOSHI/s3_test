[{"/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/index.js":"1","/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/App.js":"2","/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/reportWebVitals.js":"3","/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/components/S3Test.js":"4","/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/services/s3Handler.js":"5","/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/components/SimpleVersion.js":"6"},{"size":500,"mtime":1612145938848,"results":"7","hashOfConfig":"8"},{"size":217,"mtime":1614060815191,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1612145938849,"results":"10","hashOfConfig":"8"},{"size":5578,"mtime":1613717666868,"results":"11","hashOfConfig":"8"},{"size":3817,"mtime":1613717378016,"results":"12","hashOfConfig":"8"},{"size":2592,"mtime":1614060737376,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1vzto9n",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/index.js",[],["29","30"],"/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/App.js",["31"],"/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/reportWebVitals.js",[],"/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/components/S3Test.js",["32","33","34"],"import React, { useState } from 'react';\nimport { s3UploadHandler, s3UploadHandlerListeningProgress, s3DeleteHandler } from '../services/s3Handler';\n\nimport styled from \"styled-components\";\n\nconst S3Test = () => {\n  const [success, setSuccess] = useState(false);\n  const [urls, setUrls] = useState([]);\n  const [uploadInput, setUploadInput] = useState([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const [deleteFilePath, setDeleteFilePath] = useState(\"\");\n  const [uploadingProgress, setUploadingProgress] = useState(0);\n  \n  const handleChange = (ev) => {\n    setSuccess(false);\n    setUrls([])    \n  }\n\n  const handleUpload = async (ev) => {\n    ev.preventDefault();\n\n    setIsUploading(true);\n    console.log(uploadInput);\n    try {\n        for(let i = 0; i < uploadInput.length; i++) {\n            const dataURL = await s3UploadHandler(uploadInput[i], \"dummyToken\");\n            console.log(dataURL);\n            setUrls(state => [...state, dataURL])\n        }\n        setSuccess(true);\n    } catch(err) {\n        setSuccess(false);\n    }\n    setUploadInput([]);\n    setIsUploading(false);\n  };\n\n  const handleUploadListeningProgress = async (ev) => {\n    ev.preventDefault();\n\n    const uploadTracker = async (percent, fileName) => {\n      console.log(percent);\n      console.log(fileName);\n      setUploadingProgress(Math.floor(percent));\n      if(percent === 100) {\n        setSuccess(true);\n        setUploadInput([]);\n        setIsUploading(false);\n        setUploadingProgress(0);\n      }\n    }\n\n    setIsUploading(true);\n    console.log(uploadInput);\n    try {\n        for(let i = 0; i < uploadInput.length; i++) {\n            const dataURL = await s3UploadHandlerListeningProgress(uploadInput[i], \"dummyToken\", uploadTracker);\n            console.log(dataURL);\n            setUrls(state => [...state, dataURL])\n        }\n        // setSuccess(true);\n    } catch(err) {\n        setSuccess(false);\n    }\n  };\n\n  const deleteBtnHandler = async (ev) => {\n    ev.preventDefault();\n\n    try {\n      const result = await s3DeleteHandler(deleteFilePath, \"dummyToken\");\n\n      console.log(result);\n\n      setDeleteFilePath(\"\");\n\n    } catch(err) {\n      console.log(err)\n    }\n\n  }\n\n  const Success_message = () => (\n    <div style={{padding:15}}>\n      <h3 style={{color: 'green'}}>SUCCESSFUL UPLOAD</h3>\n      {urls.map(url=>\n        (<div key={url}><a href={url} target=\"_blank\">{url}</a></div>)\n      )}\n      <br/>\n    </div>\n  )\n\n  const Uploading_message = () => (\n    <div style={{padding:15}}>\n        <h3 style={{color: 'red'}}>UPLOADING NOW...</h3>\n        {uploadingProgress && isUploading ? \n          (\n            <div>\n              <h3 style={{color: 'red'}}>{uploadingProgress}%</h3>\n              <div style={{backgroundColor: '#ccc', width: \"500px\", height: \"2rem\", textAlign: \"center\", margin: \"0 auto\"}}>\n                <div style={\n                  {\n                    backgroundColor: 'red',\n                    height: \"2rem\",\n                    width: uploadingProgress / 100 * 100 + '%'\n                  }\n                }></div>\n              </div>\n            </div>\n          )\n          :\n          null\n        }\n      <br/>\n    </div>\n  )\n\n  return (\n    <div className=\"App\">\n      <h1 style={{textAlign: \"center\"}}>AWS S3 Demo App</h1>\n      <center>\n        <h2>UPLOAD A FILE</h2>\n        {success ? <Success_message/> : null}\n        {isUploading ?\n          <Uploading_message/>\n          :\n          <ChooseLabel>\n              <UploadInput\n                  type=\"file\"\n                  accept=\".jpg,.jpeg,.png,.mp4,.csv\"\n                  onChange={ (ev) => {\n                      handleChange();\n                      console.log(ev.target.files[0]);\n                      if (!ev.target.files[0]) {\n                        return;\n                      }\n                      setUploadInput(\n                          state => [...state, ev.target.files[0]]);\n                  }}\n              />\n              Choose files\n          </ChooseLabel>\n        }\n        <br/>\n        <div>\n            {\n                uploadInput.length === 0\n                ?\n                <p>No file is selected.</p>\n                :\n                <ul>\n                {uploadInput.map(file=>{\n                    return (<li key={file.name}>{file.name}</li>)\n                })}\n            </ul>\n            }\n        </div>\n        <button onClick={handleUpload}>UPLOAD</button>\n        <br /><br />\n        <button onClick={handleUploadListeningProgress}>UPLOAD with Progress Listener</button>\n      </center>\n      <DeleteTestDiv>\n        <h2 style={{textAlign: \"center\"}}>DELETE A FILE</h2>\n        <label>Please type the path of the file you want to delete: \n          <input\n            type=\"test\"\n            value={deleteFilePath}\n            onChange={(e)=>{\n              setDeleteFilePath(e.target.value)\n            }} />\n        </label>\n        <p>For example: folderName/fileName</p>\n        <div style={{textAlign: \"center\"}}>\n          <button onClick={deleteBtnHandler}>\n            Delete the File: {deleteFilePath}\n          </button>\n        </div>\n      </DeleteTestDiv>\n    </div>\n  );\n}\n\nconst UploadInput = styled.input`\n    display: none;\n`;\n\nconst ChooseLabel = styled.label`\n    display: block;\n    width: 200px;\n    border: 1px solid black;\n    margin: 2rem;\n    padding: 1rem;\n    cursor: pointer;\n    &:hover {\n        background-color: black;\n        color: white\n    }\n`;\n\nconst DeleteTestDiv = styled.div`\n  margin: 3rem auto;\n  text-align: center;\n`;\n\nexport default S3Test;","/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/services/s3Handler.js",["35","36"],"exports.s3UploadHandler = async (file, token) => {\n    \n    // Split the filename to get the name and type\n    let fileParts = file.name.split('.');\n    let fileName = fileParts[0];\n    fileName += new Date().getTime();\n    fileName = fileName.split(' ').join('_');\n    let fileType = fileParts[1];\n    // console.log(\"Preparing the upload\");\n\n    let returnData;\n    let signedRequest;\n    let url;\n\n    // console.log(fileType);\n\n    await fetch(\"http://localhost:8888/s3storage\",\n      {\n        method: \"POST\",\n        mode: 'cors',\n        headers: {\n            \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({fileName: fileName, fileType: fileType}),\n      }\n    ).then(response => {\n      return response.json();\n    }).then( response => {\n      returnData = response.data.returnData;\n      signedRequest = returnData.signedRequest;\n      url = returnData.url;\n    //   console.log(\"Recieved a signed request \" + signedRequest);\n    })\n    .catch(error => {\n      alert(JSON.stringify(error));\n    })\n\n    if (fileType === \"mp4\") {\n        fileType = \"video/\" + fileType;\n    }\n\n    return await fetch(signedRequest, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": fileType },\n        body: file\n    })\n    .then(result => {\n        // console.log(\"Response from s3\")\n        return url;\n    })\n    .catch(error => {\n        alert(\"ERROR \" + JSON.stringify(error));\n    })\n}\n\nexports.s3UploadHandlerListeningProgress = async (file, token, progressCallback) => {\n    const xhr = new XMLHttpRequest();\n\n    // Split the filename to get the name and type\n    let fileParts = file.name.split('.');\n    let fileName = fileParts[0];\n    fileName += new Date().getTime();\n    fileName = fileName.split(' ').join('_');\n    let fileType = fileParts[1];\n    // console.log(\"Preparing the upload\");\n\n    let returnData;\n    let signedRequest;\n    let url;\n\n    // console.log(fileType);\n\n    try {\n        await fetch(\"http://localhost:8888/s3storage\",\n        {\n          method: \"POST\",\n          mode: 'cors',\n          headers: {\n              \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({fileName: fileName, fileType: fileType}),\n        }\n      ).then(response => {\n        return response.json();\n      }).then( response => {\n        returnData = response.data.returnData;\n        signedRequest = returnData.signedRequest;\n        url = returnData.url;\n      //   console.log(\"Recieved a signed request \" + signedRequest);\n      })\n      .catch(error => {\n        alert(JSON.stringify(error));\n      })\n  \n      if (fileType === \"mp4\") {\n          fileType = \"video/\" + fileType;\n      }\n  \n      xhr.onreadystatechange = () => {\n          //Call a function when the state changes.\n        if(xhr.readyState == 4 && xhr.status == 200) {\n            console.log(xhr.responseText);\n        }\n    }\n  \n      if (progressCallback) {\n          xhr.upload.onprogress = (e) => {\n            if (e.lengthComputable) {\n              let percentComplete = (e.loaded / file.size) * 100;\n              progressCallback(percentComplete, fileName);\n            }\n          };\n        }\n    \n      xhr.open(\"PUT\", signedRequest);\n      xhr.setRequestHeader('Content-type', fileType);\n      xhr.send(file)\n\n      return url;\n\n    } catch(err) {\n        alert(\"ERROR \" + JSON.stringify(err));\n    }\n}\n\nexports.s3DeleteHandler = async (filePath, token) => {\n\n    const result = await fetch(\"http://localhost:8888/s3storage\",\n    {\n      method: \"DELETE\",\n      headers: {\n          \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({filePath}),\n    })\n    .then(response => {\n        return response.json();\n    })\n    .catch(error => {\n        alert(JSON.stringify(error));\n    })\n\n    // console.log(result);\n\n    return result;\n}","/Users/yoshidatomohiro/Documents/01_programing_training/aws_s3/s3_test/react-app-s3/src/components/SimpleVersion.js",["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":7,"column":3,"nodeType":"45","messageId":"46","endLine":7,"endColumn":28},{"ruleId":"47","severity":1,"message":"48","line":87,"column":25,"nodeType":"49","endLine":87,"endColumn":55},{"ruleId":"50","severity":1,"message":"51","line":123,"column":20,"nodeType":"49","endLine":123,"endColumn":38},{"ruleId":"50","severity":1,"message":"52","line":125,"column":11,"nodeType":"49","endLine":125,"endColumn":31},{"ruleId":"53","severity":1,"message":"54","line":101,"column":27,"nodeType":"55","messageId":"56","endLine":101,"endColumn":29},{"ruleId":"53","severity":1,"message":"54","line":101,"column":46,"nodeType":"55","messageId":"56","endLine":101,"endColumn":48},{"ruleId":"50","severity":1,"message":"51","line":83,"column":20,"nodeType":"49","endLine":83,"endColumn":38},{"ruleId":"50","severity":1,"message":"52","line":84,"column":24,"nodeType":"49","endLine":84,"endColumn":44},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component Success_message must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Uploading_message must be in PascalCase or SCREAMING_SNAKE_CASE","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]